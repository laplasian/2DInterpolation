#ifndef EXPECTS_H
#define EXPECTS_H
#include <vector>

namespace expects_bicubic {
    inline std::vector<std::vector<double>> expected_vertical = {
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037037, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037037, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 },
        { 0, 0, 0, 0, -0.037037037037037063, 0.13194444444444475, 1, 0.13194444444444375, -0.037037037037036993, 0, 0, 0, 0 }
    };
    inline std::vector<std::vector<double>> expected_horizontal = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { -0.037037, -0.034894, -0.0631, -0.076389, -0.074074, -0.074074, -0.074074, -0.074074, -0.074074, -0.076389, -0.0631, -0.034894, -0.037037,  },
        { 0.131944, 0.124309, 0.224794, 0.272135, 0.263889, 0.263889, 0.263889, 0.263889, 0.263889, 0.272135, 0.224794, 0.124309, 0.131944,  },
        { 1, 0.94213, 1.7037, 2.0625, 2, 2, 2, 2, 2, 2.0625, 1.7037, 0.94213, 1,  },
        { 0.131944, 0.124309, 0.224794, 0.272135, 0.263889, 0.263889, 0.263889, 0.263889, 0.263889, 0.272135, 0.224794, 0.124309, 0.131944,  },
        { -0.037037, -0.034894, -0.0631, -0.076389, -0.074074, -0.074074, -0.074074, -0.074074, -0.074074, -0.076389, -0.0631, -0.034894, -0.037037,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
    };
    inline std::vector<std::vector<double>> expected_rect = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0.002754, 0.002046, -0.018518, -0.047276, -0.056365, -0.053249, -0.052478, -0.052478, -0.052478, -0.052478, -0.053249, -0.056365, -0.047276, -0.018518, 0.002046, 0.002754, 0, 0, 0,  },
        { 0, 0, 0, 0.002046, 0.001519, -0.013755, -0.035117, -0.041868, -0.039553, -0.038981, -0.038981, -0.038981, -0.038981, -0.039553, -0.041868, -0.035117, -0.013755, 0.001519, 0.002046, 0, 0, 0,  },
        { 0, 0, 0, -0.018518, -0.013755, 0.122505, 0.315541, 0.392326, 0.396567, 0.401071, 0.398767, 0.398767, 0.401071, 0.396567, 0.392326, 0.315541, 0.122505, -0.013755, -0.018518, 0, 0, 0,  },
        { 0, 0, 0, -0.047276, -0.035117, 0.315541, 0.808821, 0.983155, 0.959091, 0.957178, 0.954486, 0.954486, 0.957178, 0.959091, 0.983155, 0.808821, 0.315541, -0.035117, -0.047276, 0, 0, 0,  },
        { 0, 0, 0, -0.056365, -0.041868, 0.392326, 0.983155, 1.06584, 0.835847, 0.756182, 0.771379, 0.771379, 0.756182, 0.835847, 1.06584, 0.983155, 0.392326, -0.041868, -0.056365, 0, 0, 0,  },
        { 0, 0, 0, -0.053249, -0.039553, 0.396567, 0.959091, 0.835847, 0.294707, 0.094953, 0.138921, 0.138921, 0.094953, 0.294707, 0.835847, 0.959091, 0.396567, -0.039553, -0.053249, 0, 0, 0,  },
        { 0, 0, 0, -0.052478, -0.038981, 0.401071, 0.957178, 0.756182, 0.094953, -0.151085, -0.096056, -0.096056, -0.151085, 0.094953, 0.756182, 0.957178, 0.401071, -0.038981, -0.052478, 0, 0, 0,  },
        { 0, 0, 0, -0.052478, -0.038981, 0.398767, 0.954486, 0.771379, 0.138921, -0.096056, -0.043658, -0.043658, -0.096056, 0.138921, 0.771379, 0.954486, 0.398767, -0.038981, -0.052478, 0, 0, 0,  },
        { 0, 0, 0, -0.052478, -0.038981, 0.398767, 0.954486, 0.771379, 0.138921, -0.096056, -0.043658, -0.043658, -0.096056, 0.138921, 0.771379, 0.954486, 0.398767, -0.038981, -0.052478, 0, 0, 0,  },
        { 0, 0, 0, -0.052478, -0.038981, 0.401071, 0.957178, 0.756182, 0.094953, -0.151085, -0.096056, -0.096056, -0.151085, 0.094953, 0.756182, 0.957178, 0.401071, -0.038981, -0.052478, 0, 0, 0,  },
        { 0, 0, 0, -0.053249, -0.039553, 0.396567, 0.959091, 0.835847, 0.294707, 0.094953, 0.138921, 0.138921, 0.094953, 0.294707, 0.835847, 0.959091, 0.396567, -0.039553, -0.053249, 0, 0, 0,  },
        { 0, 0, 0, -0.056365, -0.041868, 0.392326, 0.983155, 1.06584, 0.835847, 0.756182, 0.771379, 0.771379, 0.756182, 0.835847, 1.06584, 0.983155, 0.392326, -0.041868, -0.056365, 0, 0, 0,  },
        { 0, 0, 0, -0.047276, -0.035117, 0.315541, 0.808821, 0.983155, 0.959091, 0.957178, 0.954486, 0.954486, 0.957178, 0.959091, 0.983155, 0.808821, 0.315541, -0.035117, -0.047276, 0, 0, 0,  },
        { 0, 0, 0, -0.018518, -0.013755, 0.122505, 0.315541, 0.392326, 0.396567, 0.401071, 0.398767, 0.398767, 0.401071, 0.396567, 0.392326, 0.315541, 0.122505, -0.013755, -0.018518, 0, 0, 0,  },
        { 0, 0, 0, 0.002046, 0.001519, -0.013755, -0.035117, -0.041868, -0.039553, -0.038981, -0.038981, -0.038981, -0.038981, -0.039553, -0.041868, -0.035117, -0.013755, 0.001519, 0.002046, 0, 0, 0,  },
        { 0, 0, 0, 0.002754, 0.002046, -0.018518, -0.047276, -0.056365, -0.053249, -0.052478, -0.052478, -0.052478, -0.052478, -0.053249, -0.056365, -0.047276, -0.018518, 0.002046, 0.002754, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
    };
    inline std::vector<std::vector<double>> expected_point = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0.013717, -0.048868, -0.37037, -0.048868, 0.013717, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, -0.048868, 0.174093, 1.31944, 0.174093, -0.048868, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, -0.37037, 1.31944, 10, 1.31944, -0.37037, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, -0.048868, 0.174093, 1.31944, 0.174093, -0.048868, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0.013717, -0.048868, -0.37037, -0.048868, 0.013717, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
    };
}

namespace expects_bilinear {
    inline std::vector<std::vector<double>> expected_vertical =  {
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 },
        { 1, 0.625, 0.25, 0, 0, 0, 0, 0, 0 }
    };
    inline std::vector<std::vector<double>> expected_horizontal = {
        { 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0,  },
        { 0.5, 0.5, 0.5, 0.75, 1, 1, 1,  },
        { 1, 1, 1, 1.5, 2, 2, 2,  },
        { 0.5, 0.5, 0.5, 0.75, 1, 1, 1,  },
        { 0, 0, 0, 0, 0, 0, 0,  },
    };
    inline std::vector<std::vector<double>> expected_rect = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4375, 0.125, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.984375, 0.90625, 0.875, 0.875, 0.875, 0.875, 0.875, 0.9375, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.90625, 0.4375, 0.25, 0.25, 0.25, 0.25, 0.25, 0.625, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0, 0, 0, 0, 0.5, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.90625, 0.4375, 0.25, 0.25, 0.25, 0.25, 0.25, 0.625, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.5, 0.984375, 0.90625, 0.875, 0.875, 0.875, 0.875, 0.875, 0.9375, 0.875, 0.25, 0, 0,  },
        { 0, 0, 0, 0, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4375, 0.125, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
    };
    inline std::vector<std::vector<double>> expected_point = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 1.40625, 3.75, 1.40625, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 3.75, 10, 3.75, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 1.40625, 3.75, 1.40625, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  },
    };
}

namespace expects_small_data {
    inline std::vector<std::vector<double>> expected2x_bilinear = {
        { 0, 3.33333, 6.66667, 10,  },
        { 6.66667, 10, 13.3333, 16.6667,  },
        { 13.3333, 16.6667, 20, 23.3333,  },
        { 20, 23.3333, 26.6667, 30,  },
    };
    inline std::vector<std::vector<double>> expected3x_bilinear = {
        { 0, 2, 4, 6, 8, 10 },
        { 4, 6, 8, 10, 12, 14 },
        { 8, 10, 12, 14, 16, 18 },
        { 12, 14, 16, 18, 20, 22},
        { 16, 18, 20, 22, 24, 26 },
        { 20, 22, 24, 26, 28, 30 }
    };
    inline std::vector<std::vector<double>> expected2x_biqubic = {
        { 0, 2.96296, 7.03704, 10,  },
        { 5.92593, 8.88889, 12.963, 15.9259,  },
        { 14.0741, 17.037, 21.1111, 24.0741,  },
        { 20, 22.963, 27.037, 30,  },
    };

    inline std::vector<std::vector<double>> expected3x_biqubic = {
        { 0.00, 1.52, 3.76, 6.24, 8.48, 10.00 },
        { 3.04, 4.56, 6.80, 9.28, 11.52, 13.04 },
        { 7.52, 9.04, 11.28, 13.76, 16.00, 17.52 },
        { 12.48, 14.00, 16.24, 18.72, 20.96, 22.48 },
        { 16.96, 18.48, 20.72, 23.20, 25.44, 26.96 },
        { 20.00, 21.52, 23.76, 26.24, 28.48, 30.00 }
    };
}


#endif //EXPECTS_H
